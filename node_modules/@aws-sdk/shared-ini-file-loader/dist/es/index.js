import { __read, __values } from "tslib";
import { readFile } from "fs";
import { homedir } from "os";
import { join, sep } from "path";
export var ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
export var ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
var swallowError = function () { return ({}); };
export function loadSharedConfigFiles(init) {
    if (init === void 0) { init = {}; }
    var _a = init.filepath, filepath = _a === void 0 ? process.env[ENV_CREDENTIALS_PATH] || join(getHomeDir(), ".aws", "credentials") : _a, _b = init.configFilepath, configFilepath = _b === void 0 ? process.env[ENV_CONFIG_PATH] || join(getHomeDir(), ".aws", "config") : _b;
    return Promise.all([
        slurpFile(configFilepath).then(parseIni).then(normalizeConfigFile).catch(swallowError),
        slurpFile(filepath).then(parseIni).catch(swallowError),
    ]).then(function (parsedFiles) {
        var _a = __read(parsedFiles, 2), configFile = _a[0], credentialsFile = _a[1];
        return {
            configFile: configFile,
            credentialsFile: credentialsFile,
        };
    });
}
var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
function normalizeConfigFile(data) {
    var e_1, _a;
    var map = {};
    try {
        for (var _b = __values(Object.keys(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var matches = void 0;
            if (key === "default") {
                map.default = data.default;
            }
            else if ((matches = profileKeyRegex.exec(key))) {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                var _d = __read(matches, 3), _1 = _d[0], _2 = _d[1], normalizedKey = _d[2];
                if (normalizedKey) {
                    map[normalizedKey] = data[key];
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return map;
}
function parseIni(iniData) {
    var e_2, _a;
    var map = {};
    var currentSection;
    try {
        for (var _b = __values(iniData.split(/\r?\n/)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var line = _c.value;
            line = line.split(/(^|\s)[;#]/)[0]; // remove comments
            var section = line.match(/^\s*\[([^\[\]]+)]\s*$/);
            if (section) {
                currentSection = section[1];
            }
            else if (currentSection) {
                var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
                if (item) {
                    map[currentSection] = map[currentSection] || {};
                    map[currentSection][item[1]] = item[2];
                }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return map;
}
function slurpFile(path) {
    return new Promise(function (resolve, reject) {
        readFile(path, "utf8", function (err, data) {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
    });
}
function getHomeDir() {
    var _a = process.env, HOME = _a.HOME, USERPROFILE = _a.USERPROFILE, HOMEPATH = _a.HOMEPATH, _b = _a.HOMEDRIVE, HOMEDRIVE = _b === void 0 ? "C:" + sep : _b;
    if (HOME)
        return HOME;
    if (USERPROFILE)
        return USERPROFILE;
    if (HOMEPATH)
        return "" + HOMEDRIVE + HOMEPATH;
    return homedir();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDOUIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUM3QixPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVqQyxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyw2QkFBNkIsQ0FBQztBQUNsRSxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUM7QUErQmpELElBQU0sWUFBWSxHQUFHLGNBQU0sT0FBQSxDQUFDLEVBQUUsQ0FBQyxFQUFKLENBQUksQ0FBQztBQUVoQyxNQUFNLFVBQVUscUJBQXFCLENBQUMsSUFBMkI7SUFBM0IscUJBQUEsRUFBQSxTQUEyQjtJQUU3RCxJQUFBLEtBRUUsSUFBSSxTQUZtRixFQUF6RixRQUFRLG1CQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxLQUFBLEVBQ3pGLEtBQ0UsSUFBSSxlQUQrRSxFQUFyRixjQUFjLG1CQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsS0FBQSxDQUM5RTtJQUVULE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNqQixTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDdEYsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENB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Q0FBQyxHQUFHLEVBQW5FLElBQUksVUFBQSxFQUFFLFdBQVcsaUJBQUEsRUFBRSxRQUFRLGNBQUEsRUFBRSxpQkFBc0IsRUFBdEIsU0FBUyxtQkFBRyxPQUFLLEdBQUssS0FBZ0IsQ0FBQztJQUU1RSxJQUFJLElBQUk7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN0QixJQUFJLFdBQVc7UUFBRSxPQUFPLFdBQVcsQ0FBQztJQUNwQyxJQUFJLFFBQVE7UUFBRSxPQUFPLEtBQUcsU0FBUyxHQUFHLFFBQVUsQ0FBQztJQUUvQyxPQUFPLE9BQU8sRUFBRSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWFkRmlsZSB9IGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgaG9tZWRpciB9IGZyb20gXCJvc1wiO1xuaW1wb3J0IHsgam9pbiwgc2VwIH0gZnJvbSBcInBhdGhcIjtcblxuZXhwb3J0IGNvbnN0IEVOVl9DUkVERU5USUFMU19QQVRIID0gXCJBV1NfU0hBUkVEX0NSRURFTlRJQUxTX0ZJTEVcIjtcbmV4cG9ydCBjb25zdCBFTlZfQ09ORklHX1BBVEggPSBcIkFXU19DT05GSUdfRklMRVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNoYXJlZENvbmZpZ0luaXQge1xuICAvKipcbiAgICogVGhlIHBhdGggYXQgd2hpY2ggdG8gbG9jYXRlIHRoZSBpbmkgY3JlZGVudGlhbHMgZmlsZS4gRGVmYXVsdHMgdG8gdGhlXG4gICAqIHZhbHVlIG9mIHRoZSBgQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFYCBlbnZpcm9ubWVudCB2YXJpYWJsZSAoaWZcbiAgICogZGVmaW5lZCkgb3IgYH4vLmF3cy9jcmVkZW50aWFsc2Agb3RoZXJ3aXNlLlxuICAgKi9cbiAgZmlsZXBhdGg/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXRoIGF0IHdoaWNoIHRvIGxvY2F0ZSB0aGUgaW5pIGNvbmZpZyBmaWxlLiBEZWZhdWx0cyB0byB0aGUgdmFsdWUgb2ZcbiAgICogdGhlIGBBV1NfQ09ORklHX0ZJTEVgIGVudmlyb25tZW50IHZhcmlhYmxlIChpZiBkZWZpbmVkKSBvclxuICAgKiBgfi8uYXdzL2NvbmZpZ2Agb3RoZXJ3aXNlLlxuICAgKi9cbiAgY29uZmlnRmlsZXBhdGg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZmlsZSB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXJzZWRJbmlEYXRhIHtcbiAgW2tleTogc3RyaW5nXTogUHJvZmlsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaGFyZWRDb25maWdGaWxlcyB7XG4gIGNyZWRlbnRpYWxzRmlsZTogUGFyc2VkSW5pRGF0YTtcbiAgY29uZmlnRmlsZTogUGFyc2VkSW5pRGF0YTtcbn1cblxuY29uc3Qgc3dhbGxvd0Vycm9yID0gKCkgPT4gKHt9KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTaGFyZWRDb25maWdGaWxlcyhpbml0OiBTaGFyZWRDb25maWdJbml0ID0ge30pOiBQcm9taXNlPFNoYXJlZENvbmZpZ0ZpbGVzPiB7XG4gIGNvbnN0IHtcbiAgICBmaWxlcGF0aCA9IHByb2Nlc3MuZW52W0VOVl9DUkVERU5USUFMU19QQVRIXSB8fCBqb2luKGdldEhvbWVEaXIoKSwgXCIuYXdzXCIsIFwiY3JlZGVudGlhbHNcIiksXG4gICAgY29uZmlnRmlsZXBhdGggPSBwcm9jZXNzLmVudltFTlZfQ09ORklHX1BBVEhdIHx8IGpvaW4oZ2V0SG9tZURpcigpLCBcIi5hd3NcIiwgXCJjb25maWdcIiksXG4gIH0gPSBpbml0O1xuXG4gIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgc2x1cnBGaWxlKGNvbmZpZ0ZpbGVwYXRoKS50aGVuKHBhcnNlSW5pKS50aGVuKG5vcm1hbGl6ZUNvbmZpZ0ZpbGUpLmNhdGNoKHN3YWxsb3dFcnJvciksXG4gICAgc2x1cnBGaWxlKGZpbGVwYXRoKS50aGVuKHBhcnNlSW5pKS5jYXRjaChzd2FsbG93RXJyb3IpLFxuICBdKS50aGVuKChwYXJzZWRGaWxlczogQXJyYXk8UGFyc2VkSW5pRGF0YT4pID0+IHtcbiAgICBjb25zdCBbY29uZmlnRmlsZSwgY3JlZGVudGlhbHNGaWxlXSA9IHBhcnNlZEZpbGVzO1xuICAgIHJldHVybiB7XG4gICAgICBjb25maWdGaWxlLFxuICAgICAgY3JlZGVudGlhbHNGaWxlLFxuICAgIH07XG4gIH0pO1xufVxuXG5jb25zdCBwcm9maWxlS2V5UmVnZXggPSAvXnByb2ZpbGVcXHMoW1wiJ10pPyhbXlxcMV0rKVxcMSQvO1xuZnVuY3Rpb24gbm9ybWFsaXplQ29uZmlnRmlsZShkYXRhOiBQYXJzZWRJbmlEYXRhKTogUGFyc2VkSW5pRGF0YSB7XG4gIGNvbnN0IG1hcDogUGFyc2VkSW5pRGF0YSA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkYXRhKSkge1xuICAgIGxldCBtYXRjaGVzOiBBcnJheTxzdHJpbmc+IHwgbnVsbDtcbiAgICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIikge1xuICAgICAgbWFwLmRlZmF1bHQgPSBkYXRhLmRlZmF1bHQ7XG4gICAgfSBlbHNlIGlmICgobWF0Y2hlcyA9IHByb2ZpbGVLZXlSZWdleC5leGVjKGtleSkpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICBjb25zdCBbXzEsIF8yLCBub3JtYWxpemVkS2V5XSA9IG1hdGNoZXM7XG4gICAgICBpZiAobm9ybWFsaXplZEtleSkge1xuICAgICAgICBtYXBbbm9ybWFsaXplZEtleV0gPSBkYXRhW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VJbmkoaW5pRGF0YTogc3RyaW5nKTogUGFyc2VkSW5pRGF0YSB7XG4gIGNvbnN0IG1hcDogUGFyc2VkSW5pRGF0YSA9IHt9O1xuICBsZXQgY3VycmVudFNlY3Rpb246IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZm9yIChsZXQgbGluZSBvZiBpbmlEYXRhLnNwbGl0KC9cXHI/XFxuLykpIHtcbiAgICBsaW5lID0gbGluZS5zcGxpdCgvKF58XFxzKVs7I10vKVswXTsgLy8gcmVtb3ZlIGNvbW1lbnRzXG4gICAgY29uc3Qgc2VjdGlvbiA9IGxpbmUubWF0Y2goL15cXHMqXFxbKFteXFxbXFxdXSspXVxccyokLyk7XG4gICAgaWYgKHNlY3Rpb24pIHtcbiAgICAgIGN1cnJlbnRTZWN0aW9uID0gc2VjdGlvblsxXTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRTZWN0aW9uKSB7XG4gICAgICBjb25zdCBpdGVtID0gbGluZS5tYXRjaCgvXlxccyooLis/KVxccyo9XFxzKiguKz8pXFxzKiQvKTtcbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIG1hcFtjdXJyZW50U2VjdGlvbl0gPSBtYXBbY3VycmVudFNlY3Rpb25dIHx8IHt9O1xuICAgICAgICBtYXBbY3VycmVudFNlY3Rpb25dW2l0ZW1bMV1dID0gaXRlbVsyXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBzbHVycEZpbGUocGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZWFkRmlsZShwYXRoLCBcInV0ZjhcIiwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRIb21lRGlyKCk6IHN0cmluZyB7XG4gIGNvbnN0IHsgSE9NRSwgVVNFUlBST0ZJTEUsIEhPTUVQQVRILCBIT01FRFJJVkUgPSBgQzoke3NlcH1gIH0gPSBwcm9jZXNzLmVudjtcblxuICBpZiAoSE9NRSkgcmV0dXJuIEhPTUU7XG4gIGlmIChVU0VSUFJPRklMRSkgcmV0dXJuIFVTRVJQUk9GSUxFO1xuICBpZiAoSE9NRVBBVEgpIHJldHVybiBgJHtIT01FRFJJVkV9JHtIT01FUEFUSH1gO1xuXG4gIHJldHVybiBob21lZGlyKCk7XG59XG4iXX0=