import { __assign, __awaiter, __generator } from "tslib";
import { getLoggerPlugin, loggerMiddleware, loggerMiddlewareOptions } from "./loggerMiddleware";
describe("getLoggerPlugin", function () {
    var mockClientStack = {
        add: jest.fn(),
    };
    afterEach(function () {
        jest.clearAllMocks();
    });
    it("adds loggerMiddleware", function () {
        getLoggerPlugin({}).applyToStack(mockClientStack);
        expect(mockClientStack.add).toHaveBeenCalledTimes(1);
        expect(mockClientStack.add.mock.calls[0][1]).toEqual(loggerMiddlewareOptions);
    });
});
describe("loggerMiddleware", function () {
    var mockNext = jest.fn();
    var mockArgs = {
        input: {
            inputKey: "inputValue",
        },
        request: {
            method: "GET",
            headers: {},
        },
    };
    var mockResponse = {
        response: {
            statusCode: 200,
            headers: {
                "x-amzn-requestid": "requestId",
                "x-amz-id-2": "extendedRequestId",
                "x-amz-cf-id": "cfId",
            },
        },
        output: {
            outputKey: "outputValue",
        },
    };
    afterEach(function () {
        jest.clearAllMocks();
    });
    it("returns without logging if context.logger is not defined", function () { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockNext.mockResolvedValueOnce(mockResponse);
                    return [4 /*yield*/, loggerMiddleware()(mockNext, {})(mockArgs)];
                case 1:
                    response = _a.sent();
                    expect(mockNext).toHaveBeenCalledTimes(1);
                    expect(response).toStrictEqual(mockResponse);
                    return [2 /*return*/];
            }
        });
    }); });
    it("returns without logging if context.logger doesn't have info function", function () { return __awaiter(void 0, void 0, void 0, function () {
        var logger, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockNext.mockResolvedValueOnce(mockResponse);
                    logger = {};
                    return [4 /*yield*/, loggerMiddleware()(mockNext, { logger: logger })(mockArgs)];
                case 1:
                    response = _a.sent();
                    expect(mockNext).toHaveBeenCalledTimes(1);
                    expect(response).toStrictEqual(mockResponse);
                    return [2 /*return*/];
            }
        });
    }); });
    it("logs metadata if context.logger has info function", function () { return __awaiter(void 0, void 0, void 0, function () {
        var logger, context, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockNext.mockResolvedValueOnce(mockResponse);
                    logger = { info: jest.fn() };
                    context = {
                        logger: logger,
                    };
                    return [4 /*yield*/, loggerMiddleware()(mockNext, context)(mockArgs)];
                case 1:
                    response = _a.sent();
                    expect(mockNext).toHaveBeenCalledTimes(1);
                    expect(response).toStrictEqual(mockResponse);
                    expect(logger.info).toHaveBeenCalledTimes(1);
                    expect(logger.info).toHaveBeenCalledWith({
                        metadata: {
                            statusCode: mockResponse.response.statusCode,
                            requestId: mockResponse.response.headers["x-amzn-requestid"],
                            extendedRequestId: mockResponse.response.headers["x-amz-id-2"],
                            cfId: mockResponse.response.headers["x-amz-cf-id"],
                        },
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("logs header x-amzn-request-id as requestId if x-amzn-requestid is not present", function () { return __awaiter(void 0, void 0, void 0, function () {
        var requestIdBackup, customResponse, logger, context, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestIdBackup = "requestIdBackup";
                    customResponse = __assign(__assign({}, mockResponse), { response: __assign(__assign({}, mockResponse.response), { headers: {
                                "x-amzn-request-id": requestIdBackup,
                            } }) });
                    mockNext.mockResolvedValueOnce(customResponse);
                    logger = { info: jest.fn() };
                    context = {
                        logger: logger,
                    };
                    return [4 /*yield*/, loggerMiddleware()(mockNext, context)(mockArgs)];
                case 1:
                    response = _a.sent();
                    expect(mockNext).toHaveBeenCalledTimes(1);
                    expect(response).toStrictEqual(customResponse);
                    expect(logger.info).toHaveBeenCalledTimes(1);
                    expect(logger.info).toHaveBeenCalledWith({
                        metadata: {
                            statusCode: customResponse.response.statusCode,
                            requestId: requestIdBackup,
                            extendedRequestId: undefined,
                            cfId: undefined,
                        },
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=data:application/json;base64,