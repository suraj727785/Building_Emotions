"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readabletoIterable = void 0;
/**
 * Convert object stream piped in into an async iterable. This
 * daptor should be deprecated when Node stream iterator is stable.
 * Caveat: this adaptor won't have backpressure to inwards stream
 *
 * Reference: https://nodejs.org/docs/latest-v11.x/api/stream.html#stream_readable_symbol_asynciterator
 */
async function* readabletoIterable(readStream) {
    let streamEnded = false;
    let generationEnded = false;
    const records = new Array();
    readStream.on("error", (err) => {
        if (!streamEnded) {
            streamEnded = true;
        }
        if (err) {
            throw err;
        }
    });
    readStream.on("data", (data) => {
        records.push(data);
    });
    readStream.on("end", () => {
        streamEnded = true;
    });
    while (!generationEnded) {
        const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
        if (value) {
            yield value;
        }
        generationEnded = streamEnded && records.length === 0;
    }
}
exports.readabletoIterable = readabletoIterable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUE7Ozs7OztHQU1HO0FBRUksS0FBSyxTQUFTLENBQUMsQ0FBQyxrQkFBa0IsQ0FBSSxVQUFvQjtJQUMvRCxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDeEIsSUFBSSxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQzVCLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxFQUFLLENBQUM7SUFFL0IsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUM3QixJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDcEI7UUFDRCxJQUFJLEdBQUcsRUFBRTtZQUNQLE1BQU0sR0FBRyxDQUFDO1NBQ1g7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtRQUN4QixXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLGVBQWUsRUFBRTtRQUN2QixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksT0FBTyxDQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0YsSUFBSSxLQUFLLEVBQUU7WUFDVCxNQUFNLEtBQUssQ0FBQztTQUNiO1FBQ0QsZUFBZSxHQUFHLFdBQVcsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztLQUN2RDtBQUNILENBQUM7QUE3QkQsZ0RBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbi8qKlxuICogQ29udmVydCBvYmplY3Qgc3RyZWFtIHBpcGVkIGluIGludG8gYW4gYXN5bmMgaXRlcmFibGUuIFRoaXNcbiAqIGRhcHRvciBzaG91bGQgYmUgZGVwcmVjYXRlZCB3aGVuIE5vZGUgc3RyZWFtIGl0ZXJhdG9yIGlzIHN0YWJsZS5cbiAqIENhdmVhdDogdGhpcyBhZGFwdG9yIHdvbid0IGhhdmUgYmFja3ByZXNzdXJlIHRvIGlud2FyZHMgc3RyZWFtXG4gKlxuICogUmVmZXJlbmNlOiBodHRwczovL25vZGVqcy5vcmcvZG9jcy9sYXRlc3QtdjExLngvYXBpL3N0cmVhbS5odG1sI3N0cmVhbV9yZWFkYWJsZV9zeW1ib2xfYXN5bmNpdGVyYXRvclxuICovXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiogcmVhZGFibGV0b0l0ZXJhYmxlPFQ+KHJlYWRTdHJlYW06IFJlYWRhYmxlKTogQXN5bmNJdGVyYWJsZTxUPiB7XG4gIGxldCBzdHJlYW1FbmRlZCA9IGZhbHNlO1xuICBsZXQgZ2VuZXJhdGlvbkVuZGVkID0gZmFsc2U7XG4gIGNvbnN0IHJlY29yZHMgPSBuZXcgQXJyYXk8VD4oKTtcblxuICByZWFkU3RyZWFtLm9uKFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgIGlmICghc3RyZWFtRW5kZWQpIHtcbiAgICAgIHN0cmVhbUVuZGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGVycikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfSk7XG5cbiAgcmVhZFN0cmVhbS5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICByZWNvcmRzLnB1c2goZGF0YSk7XG4gIH0pO1xuXG4gIHJlYWRTdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgIHN0cmVhbUVuZGVkID0gdHJ1ZTtcbiAgfSk7XG5cbiAgd2hpbGUgKCFnZW5lcmF0aW9uRW5kZWQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IG5ldyBQcm9taXNlPFQ+KChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUocmVjb3Jkcy5zaGlmdCgpKSwgMCkpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfVxuICAgIGdlbmVyYXRpb25FbmRlZCA9IHN0cmVhbUVuZGVkICYmIHJlY29yZHMubGVuZ3RoID09PSAwO1xuICB9XG59XG4iXX0=