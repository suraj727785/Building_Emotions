"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileStreamHasher = void 0;
const fs_1 = require("fs");
const hash_calculator_1 = require("./hash-calculator");
exports.fileStreamHasher = function fileStreamHasher(hashCtor, fileStream) {
    return new Promise((resolve, reject) => {
        if (!isReadStream(fileStream)) {
            reject(new Error("Unable to calculate hash for non-file streams."));
            return;
        }
        const fileStreamTee = fs_1.createReadStream(fileStream.path, {
            start: fileStream.start,
            end: fileStream.end,
        });
        const hash = new hashCtor();
        const hashCalculator = new hash_calculator_1.HashCalculator(hash);
        fileStreamTee.pipe(hashCalculator);
        fileStreamTee.on("error", (err) => {
            // if the source errors, the destination stream needs to manually end
            hashCalculator.end();
            reject(err);
        });
        hashCalculator.on("error", reject);
        hashCalculator.on("finish", function () {
            hash.digest().then(resolve).catch(reject);
        });
    });
};
function isReadStream(stream) {
    return typeof stream.path === "string";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkJBQWtEO0FBR2xELHVEQUFtRDtBQUV0QyxRQUFBLGdCQUFnQixHQUEyQixTQUFTLGdCQUFnQixDQUMvRSxRQUF5QixFQUN6QixVQUFvQjtJQUVwQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUMsQ0FBQztZQUNwRSxPQUFPO1NBQ1I7UUFFRCxNQUFNLGFBQWEsR0FBRyxxQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ3RELEtBQUssRUFBRyxVQUFrQixDQUFDLEtBQUs7WUFDaEMsR0FBRyxFQUFHLFVBQWtCLENBQUMsR0FBRztTQUM3QixDQUFDLENBQUM7UUFFSCxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQzVCLE1BQU0sY0FBYyxHQUFHLElBQUksZ0NBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRCxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ25DLGFBQWEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDckMscUVBQXFFO1lBQ3JFLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNyQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztRQUNILGNBQWMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLGNBQWMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQzFCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixTQUFTLFlBQVksQ0FBQyxNQUFnQjtJQUNwQyxPQUFPLE9BQVEsTUFBcUIsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0FBQ3pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNoQ29uc3RydWN0b3IsIFN0cmVhbUhhc2hlciB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlUmVhZFN0cmVhbSwgUmVhZFN0cmVhbSB9IGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IEhhc2hDYWxjdWxhdG9yIH0gZnJvbSBcIi4vaGFzaC1jYWxjdWxhdG9yXCI7XG5cbmV4cG9ydCBjb25zdCBmaWxlU3RyZWFtSGFzaGVyOiBTdHJlYW1IYXNoZXI8UmVhZGFibGU+ID0gZnVuY3Rpb24gZmlsZVN0cmVhbUhhc2hlcihcbiAgaGFzaEN0b3I6IEhhc2hDb25zdHJ1Y3RvcixcbiAgZmlsZVN0cmVhbTogUmVhZGFibGVcbik6IFByb21pc2U8VWludDhBcnJheT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmICghaXNSZWFkU3RyZWFtKGZpbGVTdHJlYW0pKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKFwiVW5hYmxlIHRvIGNhbGN1bGF0ZSBoYXNoIGZvciBub24tZmlsZSBzdHJlYW1zLlwiKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZVN0cmVhbVRlZSA9IGNyZWF0ZVJlYWRTdHJlYW0oZmlsZVN0cmVhbS5wYXRoLCB7XG4gICAgICBzdGFydDogKGZpbGVTdHJlYW0gYXMgYW55KS5zdGFydCxcbiAgICAgIGVuZDogKGZpbGVTdHJlYW0gYXMgYW55KS5lbmQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBoYXNoID0gbmV3IGhhc2hDdG9yKCk7XG4gICAgY29uc3QgaGFzaENhbGN1bGF0b3IgPSBuZXcgSGFzaENhbGN1bGF0b3IoaGFzaCk7XG5cbiAgICBmaWxlU3RyZWFtVGVlLnBpcGUoaGFzaENhbGN1bGF0b3IpO1xuICAgIGZpbGVTdHJlYW1UZWUub24oXCJlcnJvclwiLCAoZXJyOiBhbnkpID0+IHtcbiAgICAgIC8vIGlmIHRoZSBzb3VyY2UgZXJyb3JzLCB0aGUgZGVzdGluYXRpb24gc3RyZWFtIG5lZWRzIHRvIG1hbnVhbGx5IGVuZFxuICAgICAgaGFzaENhbGN1bGF0b3IuZW5kKCk7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgICBoYXNoQ2FsY3VsYXRvci5vbihcImVycm9yXCIsIHJlamVjdCk7XG4gICAgaGFzaENhbGN1bGF0b3Iub24oXCJmaW5pc2hcIiwgZnVuY3Rpb24gKHRoaXM6IEhhc2hDYWxjdWxhdG9yKSB7XG4gICAgICBoYXNoLmRpZ2VzdCgpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBpc1JlYWRTdHJlYW0oc3RyZWFtOiBSZWFkYWJsZSk6IHN0cmVhbSBpcyBSZWFkU3RyZWFtIHtcbiAgcmV0dXJuIHR5cGVvZiAoc3RyZWFtIGFzIFJlYWRTdHJlYW0pLnBhdGggPT09IFwic3RyaW5nXCI7XG59XG4iXX0=