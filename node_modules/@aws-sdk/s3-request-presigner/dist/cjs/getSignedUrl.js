"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSignedUrl = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const util_format_url_1 = require("@aws-sdk/util-format-url");
const presigner_1 = require("./presigner");
exports.getSignedUrl = async (client, command, options = {}) => {
    const s3Presigner = new presigner_1.S3RequestPresigner({ ...client.config });
    const presignInterceptMiddleware = (next, context) => async (args) => {
        var _a, _b;
        const { request } = args;
        if (!protocol_http_1.HttpRequest.isInstance(request)) {
            throw new Error("Request to be presigned is not an valid HTTP request.");
        }
        // Retry information headers are not meaningful in presigned URLs
        delete request.headers["amz-sdk-invocation-id"];
        delete request.headers["amz-sdk-request"];
        const presigned = await s3Presigner.presign(request, {
            ...options,
            signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"],
            signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"],
        });
        return {
            // Intercept the middleware stack by returning fake response
            response: {},
            output: {
                $metadata: { httpStatusCode: 200 },
                presigned,
            },
        };
    };
    client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {
        name: "presignInterceptMiddleware",
        relation: "before",
        toMiddleware: "awsAuthMiddleware",
    });
    let presigned;
    try {
        const output = await client.send(command);
        //@ts-ignore the output is faked, so it's not actually OutputType
        presigned = output.presigned;
    }
    finally {
        client.middlewareStack.remove("presignInterceptMiddleware");
    }
    return util_format_url_1.formatUrl(presigned);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0U2lnbmVkVXJsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dldFNpZ25lZFVybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBcUQ7QUFHckQsOERBQXFEO0FBRXJELDJDQUFpRDtBQUVwQyxRQUFBLFlBQVksR0FBRyxLQUFLLEVBSy9CLE1BQXlELEVBQ3pELE9BQTZFLEVBQzdFLFVBQXNDLEVBQUUsRUFDdkIsRUFBRTtJQUNuQixNQUFNLFdBQVcsR0FBRyxJQUFJLDhCQUFrQixDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNqRSxNQUFNLDBCQUEwQixHQUFxRCxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFDM0csSUFBSSxFQUNKLEVBQUU7O1FBQ0YsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsMkJBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsaUVBQWlFO1FBQ2pFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sU0FBUyxHQUFHLE1BQU0sV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDbkQsR0FBRyxPQUFPO1lBQ1YsYUFBYSxRQUFFLE9BQU8sQ0FBQyxhQUFhLG1DQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztZQUNqRSxjQUFjLFFBQUUsT0FBTyxDQUFDLGNBQWMsbUNBQUksT0FBTyxDQUFDLGlCQUFpQixDQUFDO1NBQ3JFLENBQUMsQ0FBQztRQUNILE9BQU87WUFDTCw0REFBNEQ7WUFDNUQsUUFBUSxFQUFFLEVBQUU7WUFDWixNQUFNLEVBQUU7Z0JBQ04sU0FBUyxFQUFFLEVBQUUsY0FBYyxFQUFFLEdBQUcsRUFBRTtnQkFDbEMsU0FBUzthQUNWO1NBQ0ssQ0FBQztJQUNYLENBQUMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLDBCQUEwQixFQUFFO1FBQy9ELElBQUksRUFBRSw0QkFBNEI7UUFDbEMsUUFBUSxFQUFFLFFBQVE7UUFDbEIsWUFBWSxFQUFFLG1CQUFtQjtLQUNsQyxDQUFDLENBQUM7SUFFSCxJQUFJLFNBQXNCLENBQUM7SUFDM0IsSUFBSTtRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxpRUFBaUU7UUFDakUsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7S0FDOUI7WUFBUztRQUNSLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUM7S0FDN0Q7SUFFRCxPQUFPLDJCQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgQ2xpZW50LCBDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IEJ1aWxkTWlkZGxld2FyZSwgTWV0YWRhdGFCZWFyZXIsIFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBmb3JtYXRVcmwgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1mb3JtYXQtdXJsXCI7XG5cbmltcG9ydCB7IFMzUmVxdWVzdFByZXNpZ25lciB9IGZyb20gXCIuL3ByZXNpZ25lclwiO1xuXG5leHBvcnQgY29uc3QgZ2V0U2lnbmVkVXJsID0gYXN5bmMgPFxuICBJbnB1dFR5cGVzVW5pb24gZXh0ZW5kcyBvYmplY3QsXG4gIElucHV0VHlwZSBleHRlbmRzIElucHV0VHlwZXNVbmlvbixcbiAgT3V0cHV0VHlwZSBleHRlbmRzIE1ldGFkYXRhQmVhcmVyID0gTWV0YWRhdGFCZWFyZXJcbj4oXG4gIGNsaWVudDogQ2xpZW50PGFueSwgSW5wdXRUeXBlc1VuaW9uLCBNZXRhZGF0YUJlYXJlciwgYW55PixcbiAgY29tbWFuZDogQ29tbWFuZDxJbnB1dFR5cGUsIE91dHB1dFR5cGUsIGFueSwgSW5wdXRUeXBlc1VuaW9uLCBNZXRhZGF0YUJlYXJlcj4sXG4gIG9wdGlvbnM6IFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzID0ge31cbik6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIGNvbnN0IHMzUHJlc2lnbmVyID0gbmV3IFMzUmVxdWVzdFByZXNpZ25lcih7IC4uLmNsaWVudC5jb25maWcgfSk7XG4gIGNvbnN0IHByZXNpZ25JbnRlcmNlcHRNaWRkbGV3YXJlOiBCdWlsZE1pZGRsZXdhcmU8SW5wdXRUeXBlc1VuaW9uLCBNZXRhZGF0YUJlYXJlcj4gPSAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKFxuICAgIGFyZ3NcbiAgKSA9PiB7XG4gICAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgIGlmICghSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdCB0byBiZSBwcmVzaWduZWQgaXMgbm90IGFuIHZhbGlkIEhUVFAgcmVxdWVzdC5cIik7XG4gICAgfVxuICAgIC8vIFJldHJ5IGluZm9ybWF0aW9uIGhlYWRlcnMgYXJlIG5vdCBtZWFuaW5nZnVsIGluIHByZXNpZ25lZCBVUkxzXG4gICAgZGVsZXRlIHJlcXVlc3QuaGVhZGVyc1tcImFtei1zZGstaW52b2NhdGlvbi1pZFwiXTtcbiAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzW1wiYW16LXNkay1yZXF1ZXN0XCJdO1xuXG4gICAgY29uc3QgcHJlc2lnbmVkID0gYXdhaXQgczNQcmVzaWduZXIucHJlc2lnbihyZXF1ZXN0LCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc2lnbmluZ1JlZ2lvbjogb3B0aW9ucy5zaWduaW5nUmVnaW9uID8/IGNvbnRleHRbXCJzaWduaW5nX3JlZ2lvblwiXSxcbiAgICAgIHNpZ25pbmdTZXJ2aWNlOiBvcHRpb25zLnNpZ25pbmdTZXJ2aWNlID8/IGNvbnRleHRbXCJzaWduaW5nX3NlcnZpY2VcIl0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEludGVyY2VwdCB0aGUgbWlkZGxld2FyZSBzdGFjayBieSByZXR1cm5pbmcgZmFrZSByZXNwb25zZVxuICAgICAgcmVzcG9uc2U6IHt9LFxuICAgICAgb3V0cHV0OiB7XG4gICAgICAgICRtZXRhZGF0YTogeyBodHRwU3RhdHVzQ29kZTogMjAwIH0sXG4gICAgICAgIHByZXNpZ25lZCxcbiAgICAgIH0sXG4gICAgfSBhcyBhbnk7XG4gIH07XG4gIGNsaWVudC5taWRkbGV3YXJlU3RhY2suYWRkUmVsYXRpdmVUbyhwcmVzaWduSW50ZXJjZXB0TWlkZGxld2FyZSwge1xuICAgIG5hbWU6IFwicHJlc2lnbkludGVyY2VwdE1pZGRsZXdhcmVcIixcbiAgICByZWxhdGlvbjogXCJiZWZvcmVcIixcbiAgICB0b01pZGRsZXdhcmU6IFwiYXdzQXV0aE1pZGRsZXdhcmVcIixcbiAgfSk7XG5cbiAgbGV0IHByZXNpZ25lZDogSHR0cFJlcXVlc3Q7XG4gIHRyeSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgY2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgLy9AdHMtaWdub3JlIHRoZSBvdXRwdXQgaXMgZmFrZWQsIHNvIGl0J3Mgbm90IGFjdHVhbGx5IE91dHB1dFR5cGVcbiAgICBwcmVzaWduZWQgPSBvdXRwdXQucHJlc2lnbmVkO1xuICB9IGZpbmFsbHkge1xuICAgIGNsaWVudC5taWRkbGV3YXJlU3RhY2sucmVtb3ZlKFwicHJlc2lnbkludGVyY2VwdE1pZGRsZXdhcmVcIik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VXJsKHByZXNpZ25lZCk7XG59O1xuIl19