"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeHttp2Handler = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const querystring_builder_1 = require("@aws-sdk/querystring-builder");
const http2_1 = require("http2");
const get_transformed_headers_1 = require("./get-transformed-headers");
const write_request_body_1 = require("./write-request-body");
class NodeHttp2Handler {
    constructor(http2Options = {}) {
        this.http2Options = http2Options;
        this.metadata = { handlerProtocol: "h2" };
        this.connectionPool = new Map();
    }
    destroy() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        for (const [_, http2Session] of this.connectionPool) {
            http2Session.destroy();
        }
        this.connectionPool.clear();
    }
    handle(request, { abortSignal }) {
        return new Promise((resolve, reject) => {
            // if the request was already aborted, prevent doing extra work
            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
                return;
            }
            const { hostname, method, port, protocol, path, query } = request;
            const queryString = querystring_builder_1.buildQueryString(query || {});
            // create the http2 request
            const req = this.getSession(`${protocol}//${hostname}${port ? `:${port}` : ""}`).request({
                ...request.headers,
                [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
                [http2_1.constants.HTTP2_HEADER_METHOD]: method,
            });
            req.on("response", (headers) => {
                const httpResponse = new protocol_http_1.HttpResponse({
                    statusCode: headers[":status"] || -1,
                    headers: get_transformed_headers_1.getTransformedHeaders(headers),
                    body: req,
                });
                resolve({ response: httpResponse });
            });
            req.on("error", reject);
            req.on("frameError", reject);
            req.on("aborted", reject);
            const { requestTimeout } = this.http2Options;
            if (requestTimeout) {
                req.setTimeout(requestTimeout, () => {
                    req.close();
                    const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
                    timeoutError.name = "TimeoutError";
                    reject(timeoutError);
                });
            }
            if (abortSignal) {
                abortSignal.onabort = () => {
                    req.close();
                    const abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    reject(abortError);
                };
            }
            write_request_body_1.writeRequestBody(req, request);
        });
    }
    getSession(authority) {
        const connectionPool = this.connectionPool;
        const existingSession = connectionPool.get(authority);
        if (existingSession)
            return existingSession;
        const newSession = http2_1.connect(authority);
        connectionPool.set(authority, newSession);
        const { sessionTimeout } = this.http2Options;
        if (sessionTimeout) {
            newSession.setTimeout(sessionTimeout, () => {
                newSession.close();
                connectionPool.delete(authority);
            });
        }
        return newSession;
    }
}
exports.NodeHttp2Handler = NodeHttp2Handler;
//# sourceMappingURL=data:application/json;base64,